<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.nlogo.extensions.dbscan</groupId>
    <artifactId>dbscan</artifactId>
    <version>0.4</version>
    <relativePath>pom-root.xml</relativePath>
  </parent>
  
  <groupId>org.nlogo.extensions.dbscan</groupId>
  <artifactId>dbscan-NetLogo5</artifactId>
  <version>0.4</version>
  <packaging>jar</packaging>
  
  <dependencies>
    <dependency>
      <groupId>NetLogo</groupId>
      <artifactId>NetLogoLite</artifactId>
      <version>5.3.1</version>
    </dependency>
   </dependencies>
   
  <build>
    <plugins>
    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.6.0</version>
        <executions>
          <!-- Prevent test compilation as of considerable API differences (automated testing done only on latest supported API) -->
          <execution>
            <id>default-testCompile</id>
            <phase>test-compile</phase>
            <configuration>
              <testExcludes>
                <exclude>**/TestNetLogoDBSCAN.java</exclude>
              </testExcludes>
            </configuration>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Make copy of source files (and recovery afterwards) before applying syntax changes to accommodate NetLogo Extensions API v5 -->
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.4</version>
        <executions>
          <execution>
            <id>replace-source-file</id>
            <phase>generate-sources</phase>
            <configuration>
              <tasks>
                <copy file="src/main/java/org/nlogo/extensions/dbscan/DBSCANExtension.java" tofile="tmp/DBSCANExtension.bak"/>
                <!-- <copy file="src/test/java/org/nlogo/extensions/dbscan/TestNetLogoDBSCAN.java" tofile="tmp/TestNetLogoDBSCAN.bak"/> -->
                <copy file="src/main/resources/manifest.txt" tofile="tmp/manifest.bak"/>
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <execution>
            <id>restore-source-file</id>
            <phase>package</phase>
            <configuration>
              <tasks>
                <move file="tmp/DBSCANExtension.bak" tofile="src/main/java/org/nlogo/extensions/dbscan/DBSCANExtension.java"/>
                <!-- <move file="tmp/TestNetLogoDBSCAN.bak" tofile="src/test/java/org/nlogo/extensions/dbscan/TestNetLogoDBSCAN.java"/> -->
                <move file="tmp/manifest.bak" tofile="src/main/resources/manifest.txt"/>
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Replacing syntax to accommodate NetLogo Extensions API v5 -->
      <plugin>
        <groupId>com.google.code.maven-replacer-plugin</groupId>
        <artifactId>replacer</artifactId>
        <version>1.5.3</version>
        <executions>
          <execution>
            <phase>process-sources</phase>
            <goals>
              <goal>replace</goal>
            </goals> 
          </execution>
        </executions>
        <configuration>
          <includes>
            <include>${basedir}/src/main/java/org/nlogo/extensions/dbscan/DBSCANExtension.java</include>
            <!-- <include>${basedir}/src/test/java/org/nlogo/extensions/dbscan/TestNetLogoDBSCAN.java</include> -->
            <include>${basedir}/src/main/resources/manifest.txt</include>
          </includes>
          <replacements>
            <replacement>
              <token>((NetLogo-Extension-API-Version:)(.)*)</token>
              <value>NetLogo-Extension-API-Version: 5.0</value>
            </replacement>
            <replacement>
              <token>import org.nlogo.api.Reporter;</token>
              <value>import org.nlogo.api.DefaultReporter;</value> 
            </replacement>
            <replacement>
              <token>import org.nlogo.core.Syntax;</token>
              <value>import org.nlogo.api.Syntax;</value>
            </replacement>
            <replacement>
              <token>import org.nlogo.core.SyntaxJ;</token>
              <value></value>
            </replacement>
            <replacement>
              <token>import org.nlogo.core.WorldDimensions;</token>
              <value>import org.nlogo.api.World;</value>
            </replacement>
            <replacement>
              <token>ctx == null \|\| ctx.world\(\) == null</token>
              <value>ctx == null</value>
            </replacement>
            <replacement>
              <token>WorldDimensions dim = ctx.world\(\).getDimensions\(\);</token>
              <value>World dim = ((org.nlogo.api.Agent)first).world();</value>
            </replacement>
            <replacement>
              <token>dim.height\(\);</token>
              <value>dim.worldHeight();</value>
            </replacement>
            <replacement>
              <token>new DistanceMetricNetLogoAgentLocationTorus\(dim.width\(\), dim.height\(\)\) :</token>
              <value>new DistanceMetricNetLogoAgentLocationTorus(dim.worldWidth(), dim.worldHeight()) :</value>
            </replacement>
            <replacement>
              <token>new DistanceMetricNetLogoAgentLocationVerticalCylinder\(dim.width\(\)\) :</token>
              <value>new DistanceMetricNetLogoAgentLocationVerticalCylinder(dim.worldWidth()) :</value>
            </replacement>
            <replacement>
              <token>new DistanceMetricNetLogoAgentLocationHorizontalCylinder\(dim.height\(\)\) :</token>
              <value>new DistanceMetricNetLogoAgentLocationHorizontalCylinder(dim.worldHeight()) :</value>
            </replacement>
            <replacement>
              <token>SyntaxJ.reporterSyntax</token>
              <value>Syntax.reporterSyntax</value>
            </replacement>
            <replacement>
              <token>inputValues.isEmpty\(\)</token>
              <value>inputValues.count() == 0</value>
            </replacement>
            <replacement>
              <token>fieldIndex = ctx.world\(\).program\(\).patchesOwn\(\).toList\(\).indexOf\(field.toUpperCase\(\)\);</token>
              <value>fieldIndex = -2;</value>
            </replacement>
            <replacement>
              <token>implements Reporter</token>
              <value>extends DefaultReporter</value>
            </replacement>
          </replacements>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>